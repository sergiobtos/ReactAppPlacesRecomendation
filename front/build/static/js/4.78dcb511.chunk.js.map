{"version":3,"sources":["shared/components/UIElements/Card.js","shared/util/validators.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","validator","trim","test","inputReducer","state","action","isTouched","Input","useReducer","initialValue","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","row","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","pickedFile","fileIsValid","files","center","src","alt","onClick","current","click","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","asOverLay","onSubmit","disabled","inverse","undefined","prevMode"],"mappings":"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","file":"static/js/4.78dcb511.chunk.js","sourcesContent":["//imr\r\nimport React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = props => {\r\n    return(\r\n        <div className={ `card ${props.className}`} style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default  Card;\r\n\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\r\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\r\nconst VALIDATOR_TYPE_FILE = 'FILE';\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MAXLENGTH = val => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val\r\n});\r\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, {useReducer, useEffect} from 'react';\r\n\r\nimport { validate } from '../../util/validators';\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = props => {\r\n    const [inputState, dispatch] =  useReducer(inputReducer, {\r\n        value: props.initialValue || '',\r\n        isTouched: false,\r\n        isValid: props.initialValid || false\r\n    });\r\n\r\n    const {id, onInput} = props;\r\n    const { value, isValid} = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n       dispatch({\r\n           type: 'CHANGE', \r\n           val: event.target.value,\r\n           validators: props.validators}\r\n        );\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        });\r\n    };\r\n\r\n    const element = \r\n        props.element === 'input' ? (\r\n        <input \r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder} \r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={ inputState.value}\r\n        /> \r\n        ) : (\r\n        <textarea \r\n        id={props.id} \r\n        rows={props.row || 3}\r\n        value={ inputState.value}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        />);\r\n\r\n    \r\n\r\n    return (\r\n    <div className={ `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\r\n        <label htmlFor={props.id}>{ props.label}</label>\r\n        {element}\r\n        {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'INPUT_CHANGE':\r\n        let formIsValid = true;\r\n        for (const inputId in state.inputs) {\r\n          if(!state.inputs[inputId]){\r\n            continue;\r\n          }\r\n          if (inputId === action.inputId) {\r\n            formIsValid = formIsValid && action.isValid;\r\n          } else {\r\n            formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n          }\r\n        }\r\n        return {\r\n          ...state,\r\n          inputs: {\r\n            ...state.inputs,\r\n            [action.inputId]: { value: action.value, isValid: action.isValid }\r\n          },\r\n          isValid: formIsValid\r\n        };\r\n      case 'SET_DATA':\r\n        return { \r\n          inputs: action.inputs,\r\n          isValid: action.formIsValid\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n          type: 'INPUT_CHANGE',\r\n          value: value,\r\n          isValid: isValid,\r\n          inputId: id\r\n        });\r\n      }, []);\r\n\r\n      const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n          type: 'SET_DATA',\r\n          inputs: inputData,\r\n          formIsValid: formValidity \r\n        });\r\n      }, []);\r\n\r\n      return [formState, inputHandler, setFormData];\r\n};","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport './ImageUpload.css';\r\nimport Button from './Button';\r\n\r\nconst ImageUpload = props => {\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState();\r\n    const filePickerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if(!file){\r\n            return;\r\n        }\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () =>{\r\n            setPreviewUrl(fileReader.result);\r\n        }\r\n        fileReader.readAsDataURL(file);\r\n    }, [file]);\r\n\r\n    const pickedHandler = event => {\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1)\r\n        {\r\n            pickedFile = event.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        }else{\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    }\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input \r\n                id={props.id}\r\n                ref={filePickerRef} \r\n                style={{display: 'none'}} \r\n                type=\"file\" \r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickedHandler} />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                   {previewUrl && <img src={previewUrl} alt=\"Preview\" /> }\r\n                   {!previewUrl && <p>Please pick a image first.</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>Pick Image</Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ImageUpload;","import React, {useState, useContext} from 'react';\r\n\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const auth = useContext(AuthContext);\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n    const { isLoading, error, sendRequest, clearError} = useHttpClient();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n            email:{\r\n                value: '',\r\n                isValid: false  \r\n                },\r\n            password:{\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        }, false\r\n    );\r\n\r\n    const authSubmitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n        if(isLoginMode){\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL + '/users/login', \r\n                    'POST', \r\n                    JSON.stringify({email: formState.inputs.email.value, password: formState.inputs.password.value}),\r\n                    {'Content-Type' : 'application/json'}\r\n                );\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (error) {\r\n                \r\n            }\r\n                \r\n        }else{\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append('email', formState.inputs.email.value);\r\n                formData.append('name', formState.inputs.name.value);\r\n                formData.append('password', formState.inputs.password.value);\r\n                formData.append('image', formState.inputs.image.value);\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL + '/users/signup', \r\n                   'POST',\r\n                   formData\r\n                );\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (error) {\r\n            } \r\n        }\r\n        \r\n    };\r\n\r\n    const switchModelHandler = () => {\r\n        if(!isLoginMode){\r\n            setFormData({\r\n                ...formState.inputs,\r\n                name: undefined,\r\n                image: undefined\r\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid)\r\n        }else{\r\n            setFormData({\r\n                ...formState.inputs,\r\n                name: {\r\n                    value: '',\r\n                    isValid: false\r\n                },\r\n                image:{\r\n                   value: null,\r\n                   isValid: false \r\n                }\r\n            },false);\r\n        }\r\n        setIsLoginMode(prevMode => !prevMode);  \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError}/>\r\n        <Card className=\"authentication\">\r\n            {isLoading && <LoadingSpinner asOverLay />}\r\n            <h2>Login Required</h2>\r\n            <hr/>\r\n            <form onSubmit={authSubmitHandler}>\r\n                {!isLoginMode && (\r\n                    <Input \r\n                    element=\"input\" \r\n                    id=\"name\" type=\"text\" \r\n                    label=\"Your Name\" \r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Please enter a name.\"\r\n                    onInput={inputHandler} \r\n                    />\r\n                )}\r\n                {!isLoginMode && <ImageUpload center id=\"image\" onInput={inputHandler} errorText=\"Please provide an image.\"/>}\r\n                <Input \r\n                element=\"input\" \r\n                id=\"email\" \r\n                type=\"email\" \r\n                label=\"E-mail\" \r\n                validators={[VALIDATOR_EMAIL()]}\r\n                errorText=\"Please enter a valid email address \" \r\n                onInput={inputHandler}\r\n                />\r\n                <Input \r\n                element=\"input\" \r\n                id=\"password\" \r\n                type=\"password\" \r\n                label=\"Password\" \r\n                validators={[VALIDATOR_MINLENGTH(6)]}\r\n                errorText=\"Please enter a valid password, at least 5 characters.\" \r\n                onInput={inputHandler}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>\r\n                    {isLoginMode ?  'LOGIN' : 'SIGNUP'}\r\n                </Button>\r\n            </form>\r\n            <Button inverse onClick={switchModelHandler}>\r\n              SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\r\n            </Button>\r\n        </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Auth;"],"sourceRoot":""}